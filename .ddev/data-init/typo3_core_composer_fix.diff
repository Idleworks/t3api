From 169e40eb9bc83cbdef1ddbd8969aac4d5a95cf5b Mon Sep 17 00:00:00 2001
From: Helmut Hummel <typo3@helhum.io>
Date: Tue, 05 Oct 2021 15:57:06 +0200
Subject: [PATCH] [BUGFIX] Populate composer name to extension key map early

In order to be able to properly resolve package ordering,
the package manager resolves the dependencies of packages.

For dependencies to TYPO3 extensions, the Extension key is
used as dependency name. To resolve the extension key from
the composer name, an internal mapping array is used.

Dependency objects or each extension Package are created
on construction of the Package object. It can now happen that
composer package typo3/cms-backend is created before typo3/cms-core
is created, which leads to the situation that the package
typo3/cms-backend references typo3/cms-core as dependency, not
the extension key "core", which will later be expected during package
sorting by dependency.

To fix that, the mapping array is now created early, before any
TYPO3 extension Package is created.

Also make sure the list of composer (only) packages is cleaned from
TYPO3 extensions.

Resolves: #95477
Releases: master
Change-Id: I39234b295e03691c0c8d62ef3fd61268fbdba5fe
---

diff --git a/Classes/Composer/PackageArtifactBuilder.php b/Classes/Composer/PackageArtifactBuilder.php
index 2b4b38b..1492746 100644
--- a/Classes/Composer/PackageArtifactBuilder.php
+++ b/Classes/Composer/PackageArtifactBuilder.php
@@ -50,7 +50,7 @@
     private Config $config;

     /**
-     * Array of package keys that are installed by Composer but have no relation to TYPO3 extension API
+     * Array of Composer package names (as array key) that are installed by Composer but have no relation to TYPO3 extension API
      * @var array
      */
     private $availableComposerPackageKeys = [];
@@ -63,7 +63,7 @@

     protected function isComposerDependency(string $packageName): bool
     {
-        return PlatformRepository::isPlatformPackage($packageName) || in_array($packageName, $this->availableComposerPackageKeys, true);
+        return PlatformRepository::isPlatformPackage($packageName) || ($this->availableComposerPackageKeys[$packageName] ?? false);
     }

     /**
@@ -136,12 +136,15 @@
         $installedTypo3Packages = array_map(
             function (array $packageAndPath) use ($rootPackage) {
                 [$composerPackage, $packagePath] = $packageAndPath;
+                $packageName = $composerPackage->getName();
                 try {
                     $extensionKey = ExtensionKeyResolver::resolve($composerPackage);
                 } catch (\Throwable $e) {
                     // In case we can not determine the extension key, we take the composer name
-                    $extensionKey = $composerPackage->getName();
+                    $extensionKey = $packageName;
                 }
+                unset($this->availableComposerPackageKeys[$packageName]);
+                $this->composerNameToPackageKeyMap[$packageName] = $extensionKey;
                 if ($composerPackage === $rootPackage) {
                     return $this->handleRootPackage($rootPackage, $extensionKey);
                 }
@@ -155,9 +158,9 @@
                     [$composerPackage,] = $packageAndPath;
                     // Filter all Composer packages without typo3/cms definition, but keep all
                     // package names, to be able to ignore Composer only dependencies when ordering the packages
-                    $this->availableComposerPackageKeys[] = $composerPackage->getName();
+                    $this->availableComposerPackageKeys[$composerPackage->getName()] = true;
                     foreach ($composerPackage->getReplaces() as $link) {
-                        $this->availableComposerPackageKeys[] = $link->getTarget();
+                        $this->availableComposerPackageKeys[$link->getTarget()] = true;
                     }
                     return isset($composerPackage->getExtra()['typo3/cms']);
                 }
