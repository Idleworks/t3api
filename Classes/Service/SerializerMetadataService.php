<?php
declare(strict_types=1);

namespace SourceBroker\T3api\Service;

use ReflectionClass;
use ReflectionException;
use ReflectionProperty;
use RuntimeException;
use Symfony\Component\Yaml\Yaml;
use TYPO3\CMS\Extbase\Persistence\ObjectStorage;
use TYPO3\CMS\Extbase\Reflection\DocCommentParser;

/**
 * Class SerializerMetadataService
 */
class SerializerMetadataService
{

    /**
     * @param string $entity
     */
    public static function generateAutoloadForEntity(string $entity): void
    {
        $generatedMetadataFile = SerializerService::getAutogeneratedMetadataDirectory() . '/'
            . str_replace('\\', '.', $entity) . '.yml';

        file_put_contents($generatedMetadataFile, Yaml::dump(self::getForEntity($entity)));
    }

    /**
     * @param string $entity
     *
     * @return array
     */
    protected static function getForEntity(string $entity): array
    {
        try {
            $reflectionClass = new ReflectionClass($entity);

            return [
                $entity => [
                    'properties' => self::getProperties($reflectionClass),
                ],
            ];
        } catch (ReflectionException $e) {
            // @todo log error to TYPO3
        }

        return [];
    }

    /**
     * @param ReflectionClass $reflectionClass
     *
     * @return array
     */
    protected static function getProperties(ReflectionClass $reflectionClass): array
    {
        $docCommentParser = new DocCommentParser(true);
        $properties = [];

        /** @var ReflectionProperty $property */
        foreach ($reflectionClass->getProperties() as $reflectionProperty) {
            $docCommentParser->parseDocComment($reflectionProperty->getDocComment());
            $type = $docCommentParser->getTagValues('var')[0];

            if (empty($type)) {
                throw new RuntimeException(
                    sprintf(
                        '`@var` annotation missing in property %s',
                        $reflectionClass->getName() . '::' . $reflectionProperty->getName()
                    ),
                    1570723476311
                );
            }

            $properties[$reflectionProperty->getName()] = [
                'type' => self::parsePropertyType($type),
            ];
        }

        return $properties;
    }

    /**
     * @param string $type
     *
     * @return string
     */
    protected static function parsePropertyType(string $type)
    {
        $type = trim($type);

        if (class_exists($type)) {
            // @todo change date time format to DateTime::ATOM ?
            return ltrim($type, '\\');
        } elseif (strpos($type, '<') !== false) {
            $collectionType = trim(explode('<', $type)[0]);
            $itemsType = trim(explode('<', $type)[1], '> ');

            if (
                is_a($collectionType, ObjectStorage::class, true)
                || is_subclass_of($collectionType, ObjectStorage::class)
            ) {
                return sprintf('%s<%s>', ObjectStorage::class, ltrim($itemsType, '\\'));
            }

            // @todo sure it does not resolve all cases
        } elseif (in_array($type, ['string', 'int', 'integer', 'boolean', 'bool', 'double', 'float'])) {
            return $type;
        }

        return $type;
    }
}
